<?php

namespace App\Services;

use AssistedMindfulness\NaiveBayes\Classifier;
use Illuminate\Http\Client\Response;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use NotificationChannels\Telegram\TelegramMessage;

class TelegramBot
{
    public const SPAM = 'spam';
    public const HAM = 'ham';

    private $token;

    /**
     * Construct a new TelegramBot instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->token = config('services.telegram-bot-api.token');
    }

    /**
     * Mute a user in a group chat.
     *
     * @param int $chatId
     * @param int $userId
     * @param int $muteDuration
     *
     * @return \Illuminate\Http\Client\Response
     */
    public function muteUserInGroup($chatId, $userId, $muteDuration = 60): Response
    {
        $url = "https://api.telegram.org/bot{$this->token}/restrictChatMember";

        return Http::post($url, [
            'chat_id'                   => $chatId,
            'user_id'                   => $userId,
            'until_date'                => time() + $muteDuration,
            'can_send_messages'         => false,
            'can_send_media_messages'   => false,
            'can_send_other_messages'   => false,
            'can_add_web_page_previews' => false,
        ]);
    }

    /**
     * Delete a message from a chat.
     *
     * @param int $chatId
     * @param int $messageId
     *
     * @return \Illuminate\Http\Client\Response
     */
    public function deleteMessage($chatId, $messageId): Response
    {
        $url = "https://api.telegram.org/bot{$this->token}/deleteMessage";

        return Http::post($url, [
            'chat_id'    => $chatId,
            'message_id' => $messageId,
        ]);
    }

    /**
     * Check if a message is spam.
     *
     * @param string $message
     *
     * @return bool
     */
    public function isSpam(string $message): bool
    {
        $classifier = new Classifier();

        $classifier
            /**
             * Spam
             */
            ->learn('–ó–¥—Äa–≤c—Ç–≤y–π—Ç–µ, –ø—Äe–¥–æ—Å—Ça–≤–ª—è—é y–¥–∞–ª—ë–Ω–Ωy—é –∑a–Ω—è—Ço—Å—Ç—å. 770$+ –≤ –Ωe–¥e–ª—é –öo–ºy –∏–Ω—Çepe—Å–Ω–æ, –ø–∏—à–∏—Çe  "+"  –≤ –ª–∏—á–Ω—ã–µ', static::SPAM)
            ->learn('–í—Åe—Ö –ø—Ä–∏–≤e—Ç—Å—Ç–≤—É—é. –ùy–∂–Ω—ã –øa—Ä—Ç–Ω—ë—Ä—ã –¥–ª—è —É–¥–∞–ª—ë–Ω–Ωo–≥o —Åo—Ç—Ä—É–¥–Ω–∏—áe—Å—Ç–≤–∞. –üo–¥—Ä–æ–±–Ωo—Å—Ç–∏ –≤ –ª—Å', static::SPAM)

            /**
             * Hamming
             */
            ->learn('–∞ —É—á—É—Å—å —è –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—á—É —Ä–∞–±–æ—Ç—É –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –Ω–∞–π—Ç–∏ –∏ —á—Ç–æ–± –¥–µ—Ç–∏ –∂–∏–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)', static::HAM)
            ->learn('—É —Ç–µ–±—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–µ —Ç–∞–∫ –Ω–∞–¥–æ –º–∞—Å—Å–∏–≤ ->asyncParameters()', static::HAM)
            ->learn('MVC. –ú–æ–∂–Ω–æ –µ—â—ë —Ç–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Ñ–∞—Å–∞–¥—ã, view-model', static::HAM)
            ->learn('–ü–æ–ø—Ä–æ–±—É–µ–º, —Å–ø–∞—Å–∏–±–æ üôè', static::HAM)
            ->learn('https://laravel.com/docs/', static::HAM)
            ->learn('–î–∞', static::HAM)
            ->learn('–ü–æ–ª—É—á–∏–ª–æ—Å—å', static::HAM);

        TelegramMessage::create()
            ->to(config('services.telegram-bot-api.chat_id'))
            ->line('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ '.$classifier->most($message))
            ->line('')
            ->line('*üìÇ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è*')
            ->escapedLine($message)
            ->send();

        return Str::of($message)->contains([
            'y–¥–∞–ª—ë–Ω–Ωy—é',
            '–≤ –Ωe–¥e–ª—é',
            '–∏–Ω—Çepe—Å–Ω–æ',
            '–øa—Ä—Ç–Ω—ë—Ä—ã',
            '—Åo—Ç—Ä—É–¥–Ω–∏—áe—Å—Ç–≤',
        ]);
    }
}
